---
// Demo page - Ejemplo de c√≥mo se ver√≠a un Wrapped generado
const demoData = {
  player: {
    game_name: "Faker",
    tag_line: "KR1",
    summoner_level: 589,
    profile_icon_id: 29
  },
  ranked: {
    tier: "CHALLENGER",
    rank: "I",
    wins: 245,
    losses: 123,
    winrate: 66.5,
    lp: 1234
  },
  statistics: {
    total_games: 368,
    wins: 245,
    winrate: 66.5,
    avg_kda: 4.8,
    pentakills: 5,
    quadrakills: 23,
    total_kills: 2543,
    total_deaths: 856,
    total_assists: 3421
  },
  top_champions: [
    { name: "Azir", mastery_points: 1234567, games: 89, winrate: 62.5 },
    { name: "LeBlanc", mastery_points: 987654, games: 76, winrate: 58.3 },
    { name: "Orianna", mastery_points: 765432, games: 54, winrate: 70.2 }
  ]
};
---

<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tu Wrapped 2025 - {demoData.player.game_name}#{demoData.player.tag_line}</title>
  <link rel="icon" type="image/svg+xml" href="/favicon.svg">
</head>
<body>
  <div class="demo-container">
    <!-- Slide 1: Bienvenida -->
    <section class="slide slide-1">
      <div class="content">
        <h1 class="animate-in">Tu 2025 en</h1>
        <h2 class="gradient-text animate-in delay-1">League of Legends</h2>
        <p class="subtitle animate-in delay-2">{demoData.player.game_name}#{demoData.player.tag_line}</p>
      </div>
    </section>

    <!-- Slide 2: Partidas -->
    <section class="slide slide-2">
      <div class="content">
        <div class="big-number animate-in">{demoData.statistics.total_games}</div>
        <h2 class="animate-in delay-1">Partidas Jugadas</h2>
        <p class="subtitle animate-in delay-2">Equivalente a {Math.round(demoData.statistics.total_games * 0.5)} horas en la Grieta</p>
      </div>
    </section>

    <!-- Slide 3: Victorias -->
    <section class="slide slide-3">
      <div class="content">
        <div class="big-number gradient-text animate-in">{demoData.statistics.winrate}%</div>
        <h2 class="animate-in delay-1">Tasa de Victoria</h2>
        <div class="stats-grid animate-in delay-2">
          <div class="stat-box">
            <div class="stat-value">{demoData.statistics.wins}</div>
            <div class="stat-label">Victorias</div>
          </div>
          <div class="stat-box">
            <div class="stat-value">{demoData.statistics.total_games - demoData.statistics.wins}</div>
            <div class="stat-label">Derrotas</div>
          </div>
        </div>
      </div>
    </section>

    <!-- Slide 4: Ranked -->
    <section class="slide slide-4">
      <div class="content">
        <h2 class="animate-in">Alcanzaste</h2>
        <div class="rank-display animate-in delay-1">
          <div class="rank-icon">üèÜ</div>
          <div class="rank-text">{demoData.ranked.tier} {demoData.ranked.rank}</div>
        </div>
        <p class="subtitle animate-in delay-2">{demoData.ranked.lp} LP ¬∑ Top 0.01%</p>
      </div>
    </section>

    <!-- Slide 5: Top Campeones -->
    <section class="slide slide-5">
      <div class="content">
        <h2 class="animate-in">Tus Campeones</h2>
        <div class="champions-list">
          {demoData.top_champions.map((champ, i) => (
            <div class="champion-card animate-in" style={`animation-delay: ${i * 0.2}s`}>
              <div class="champion-rank">#{i + 1}</div>
              <div class="champion-info">
                <h3>{champ.name}</h3>
                <p>{champ.games} partidas ¬∑ {champ.winrate}% WR</p>
                <div class="mastery-bar">
                  <div class="mastery-fill" style={`width: ${(champ.mastery_points / 1500000) * 100}%`}></div>
                </div>
                <p class="mastery-points">{champ.mastery_points.toLocaleString()} puntos</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>

    <!-- Slide 6: KDA -->
    <section class="slide slide-6">
      <div class="content">
        <h2 class="animate-in">Tu KDA Promedio</h2>
        <div class="big-number gradient-text animate-in delay-1">{demoData.statistics.avg_kda}</div>
        <div class="kda-breakdown animate-in delay-2">
          <div class="kda-stat">
            <span class="kda-value">{(demoData.statistics.total_kills / demoData.statistics.total_games).toFixed(1)}</span>
            <span class="kda-label">K</span>
          </div>
          <span class="kda-separator">/</span>
          <div class="kda-stat">
            <span class="kda-value">{(demoData.statistics.total_deaths / demoData.statistics.total_games).toFixed(1)}</span>
            <span class="kda-label">D</span>
          </div>
          <span class="kda-separator">/</span>
          <div class="kda-stat">
            <span class="kda-value">{(demoData.statistics.total_assists / demoData.statistics.total_games).toFixed(1)}</span>
            <span class="kda-label">A</span>
          </div>
        </div>
      </div>
    </section>

    <!-- Slide 7: Momentos √âpicos -->
    <section class="slide slide-7">
      <div class="content">
        <h2 class="animate-in">Momentos √âpicos</h2>
        <div class="achievements animate-in delay-1">
          <div class="achievement">
            <div class="achievement-icon">‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</div>
            <div class="achievement-value">{demoData.statistics.pentakills}</div>
            <div class="achievement-label">Pentakills</div>
          </div>
          <div class="achievement">
            <div class="achievement-icon">‚≠ê‚≠ê‚≠ê‚≠ê</div>
            <div class="achievement-value">{demoData.statistics.quadrakills}</div>
            <div class="achievement-label">Quadrakills</div>
          </div>
        </div>
      </div>
    </section>

    <!-- Navigation -->
    <div class="nav-dots">
      {[1,2,3,4,5,6,7].map(i => (
        <button class="dot" data-slide={i}></button>
      ))}
    </div>

    <div class="controls">
      <button class="btn-nav" id="prevBtn">‚Üê Anterior</button>
      <button class="btn-nav" id="nextBtn">Siguiente ‚Üí</button>
    </div>
  </div>

  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    :root {
      --primary: #0bc5ea;
      --secondary: #c084fc;
      --accent: #fbbf24;
      --bg-dark: #0a0e1a;
      --text: #f3f4f6;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: var(--bg-dark);
      color: var(--text);
      overflow: hidden;
    }

    .demo-container {
      position: relative;
      width: 100vw;
      height: 100vh;
    }

    .slide {
      position: absolute;
      width: 100%;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      opacity: 0;
      transform: translateX(100%);
      transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .slide.active {
      opacity: 1;
      transform: translateX(0);
    }

    .slide.prev {
      transform: translateX(-100%);
    }

    .content {
      text-align: center;
      max-width: 800px;
      padding: 2rem;
    }

    .animate-in {
      opacity: 0;
      animation: fadeInUp 0.6s forwards;
    }

    .delay-1 { animation-delay: 0.3s; }
    .delay-2 { animation-delay: 0.6s; }

    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(30px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    h1 {
      font-size: 3rem;
      font-weight: 300;
      margin-bottom: 1rem;
    }

    h2 {
      font-size: 2.5rem;
      font-weight: 700;
      margin-bottom: 2rem;
    }

    .gradient-text {
      background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .subtitle {
      font-size: 1.5rem;
      color: #9ca3af;
    }

    .big-number {
      font-size: 8rem;
      font-weight: 900;
      line-height: 1;
      margin-bottom: 1rem;
    }

    .stats-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 2rem;
      margin-top: 2rem;
    }

    .stat-box {
      background: rgba(255, 255, 255, 0.05);
      padding: 2rem;
      border-radius: 1rem;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .stat-value {
      font-size: 3rem;
      font-weight: 700;
      color: var(--primary);
    }

    .stat-label {
      font-size: 1.2rem;
      color: #9ca3af;
      margin-top: 0.5rem;
    }

    .rank-display {
      margin: 2rem 0;
    }

    .rank-icon {
      font-size: 5rem;
      margin-bottom: 1rem;
    }

    .rank-text {
      font-size: 4rem;
      font-weight: 900;
      background: linear-gradient(135deg, #fbbf24 0%, #f59e0b 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .champions-list {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      margin-top: 2rem;
    }

    .champion-card {
      display: flex;
      align-items: center;
      gap: 1.5rem;
      background: rgba(255, 255, 255, 0.05);
      padding: 1.5rem;
      border-radius: 1rem;
      border: 1px solid rgba(255, 255, 255, 0.1);
      text-align: left;
    }

    .champion-rank {
      font-size: 2rem;
      font-weight: 900;
      color: var(--primary);
      min-width: 60px;
    }

    .champion-info {
      flex: 1;
    }

    .champion-info h3 {
      font-size: 1.5rem;
      margin-bottom: 0.5rem;
    }

    .champion-info p {
      color: #9ca3af;
      margin-bottom: 0.5rem;
    }

    .mastery-bar {
      width: 100%;
      height: 8px;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 4px;
      overflow: hidden;
      margin: 0.5rem 0;
    }

    .mastery-fill {
      height: 100%;
      background: linear-gradient(90deg, var(--primary) 0%, var(--secondary) 100%);
      transition: width 1s ease;
    }

    .mastery-points {
      font-size: 0.9rem;
      color: var(--primary);
    }

    .kda-breakdown {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 1rem;
      margin-top: 2rem;
    }

    .kda-stat {
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .kda-value {
      font-size: 2.5rem;
      font-weight: 700;
    }

    .kda-label {
      font-size: 1.2rem;
      color: #9ca3af;
    }

    .kda-separator {
      font-size: 2rem;
      color: #9ca3af;
    }

    .achievements {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 2rem;
      margin-top: 2rem;
    }

    .achievement {
      background: rgba(255, 255, 255, 0.05);
      padding: 2rem;
      border-radius: 1rem;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .achievement-icon {
      font-size: 3rem;
      margin-bottom: 1rem;
    }

    .achievement-value {
      font-size: 4rem;
      font-weight: 900;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .achievement-label {
      font-size: 1.2rem;
      color: #9ca3af;
    }

    /* Navigation */
    .nav-dots {
      position: fixed;
      right: 2rem;
      top: 50%;
      transform: translateY(-50%);
      display: flex;
      flex-direction: column;
      gap: 1rem;
      z-index: 100;
    }

    .dot {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.3);
      border: none;
      cursor: pointer;
      transition: all 0.3s;
    }

    .dot.active {
      background: var(--primary);
      transform: scale(1.3);
    }

    .controls {
      position: fixed;
      bottom: 2rem;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      gap: 1rem;
      z-index: 100;
    }

    .btn-nav {
      background: rgba(255, 255, 255, 0.1);
      color: var(--text);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 1rem 2rem;
      border-radius: 0.5rem;
      font-size: 1rem;
      cursor: pointer;
      transition: all 0.3s;
    }

    .btn-nav:hover {
      background: var(--primary);
      border-color: var(--primary);
    }

    @media (max-width: 768px) {
      .big-number { font-size: 4rem; }
      h1 { font-size: 2rem; }
      h2 { font-size: 1.8rem; }
      .stats-grid { grid-template-columns: 1fr; }
      .achievements { grid-template-columns: 1fr; }
    }
  </style>

  <script>
    let currentSlide = 1;
    const totalSlides = 7;

    function showSlide(n: number) {
      const slides = document.querySelectorAll('.slide');
      const dots = document.querySelectorAll('.dot');
      
      if (n > totalSlides) currentSlide = 1;
      if (n < 1) currentSlide = totalSlides;
      else currentSlide = n;

      slides.forEach((slide, i) => {
        slide.classList.remove('active', 'prev');
        if (i + 1 === currentSlide) {
          slide.classList.add('active');
        } else if (i + 1 < currentSlide) {
          slide.classList.add('prev');
        }
      });

      dots.forEach((dot, i) => {
        dot.classList.toggle('active', i + 1 === currentSlide);
      });
    }

    document.getElementById('nextBtn')?.addEventListener('click', () => {
      showSlide(currentSlide + 1);
    });

    document.getElementById('prevBtn')?.addEventListener('click', () => {
      showSlide(currentSlide - 1);
    });

    document.querySelectorAll('.dot').forEach((dot, i) => {
      dot.addEventListener('click', () => {
        showSlide(i + 1);
      });
    });

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowRight') showSlide(currentSlide + 1);
      if (e.key === 'ArrowLeft') showSlide(currentSlide - 1);
    });

    // Initialize
    showSlide(1);
  </script>
</body>
</html>


